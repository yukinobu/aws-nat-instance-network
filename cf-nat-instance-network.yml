AWSTemplateFormatVersion: 2010-09-09
Description: A NAT instance and private network.

Parameters:
  EC2NATInstanceInstanceType:
    Description: EC2 instance type for the NAT instance (should be Graviton).
    Type: String
    Default: t4g.small
  EC2NATInstanceKeyName:
    Description: SSH key pair name for the NAT instance.
    Type: String
    Default: ""
  EC2NATInstanceAdminNetwork:
    Description: Network range for administration like "203.0.113.114/32".
    Type: String
    Default: ""

Conditions:
  IsKeyNameProvided: !Not [!Equals ["", !Ref EC2NATInstanceKeyName]]
  IsAdminNetworkProvided: !Not [!Equals ["", !Ref EC2NATInstanceAdminNetwork]]

Mappings:
  RegionToAlpineLinuxAMI:
    ap-northeast-1:
      ID: ami-0151479164ce47f56
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:30:11.000Z"
    ap-northeast-2:
      ID: ami-07e95f393fc010900
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:30:02.000Z"
    ap-northeast-3:
      ID: ami-0dcdf17999a2b55f6
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:57.000Z"
    ap-south-1:
      ID: ami-0c599972e1266db11
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:28:52.000Z"
    ap-southeast-1:
      ID: ami-0acf0ea9f2fad95d2
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:30:22.000Z"
    ap-southeast-2:
      ID: ami-081b6390fc399f3e8
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:30:26.000Z"
    ca-central-1:
      ID: ami-0c1dd45b48a0cf6a4
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:18.000Z"
    eu-central-1:
      ID: ami-0fb33f81207e6557f
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:21.000Z"
    eu-north-1:
      ID: ami-0121455c32a479927
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:40.000Z"
    eu-west-1:
      ID: ami-0ee39bb40d35a2a34
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:51.000Z"
    eu-west-2:
      ID: ami-094cb611e42043aca
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:48.000Z"
    eu-west-3:
      ID: ami-0aac65bc725e30689
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:44.000Z"
    sa-east-1:
      ID: ami-068d2d4c809ddc5ce
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:30:14.000Z"
    us-east-1:
      ID: ami-0e11b0527e5c1e577
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:30:38.000Z"
    us-east-2:
      ID: ami-0953fa42508e71f6b
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:30:41.000Z"
    us-west-1:
      ID: ami-08300a50970b87e7a
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:29:30.000Z"
    us-west-2:
      ID: ami-0ecc337bee6e30d6a
      Name: "alpine-3.18.3-aarch64-uefi-cloudinit-r0"
      Date: "2023-08-07T18:03:13.000Z"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  VPCv6Block:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EIP"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"

  # PublicSubnet

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPCv6Block
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      Ipv6CidrBlock:
        !Select [0, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64]]
      AssignIpv6AddressOnCreation: true
      AvailabilityZone:
        { "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] }
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetA"

  PublicRouteToIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteToIGWV6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  # PrivateSubnet

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/20
      Ipv6CidrBlock:
        !Select [128, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64]]
      AssignIpv6AddressOnCreation: true
      AvailabilityZone:
        { "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] }
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnetA"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateRouteTable"

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  # SecurityGroup

  NATInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-NATInstanceSecurityGroup"
      GroupDescription: Security Group that allows all traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 10.0.128.0/17
          IpProtocol: -1
        - CidrIpv6:
            !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 2, 71]]
          IpProtocol: -1
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::If:
              - IsAdminNetworkProvided
              - !Ref EC2NATInstanceAdminNetwork
              - !Ref AWS::NoValue
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 8
          ToPort: -1
        - CidrIpv6: ::/0
          IpProtocol: icmpv6
          FromPort: 128
          ToPort: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
        - CidrIpv6: ::/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NATInstanceSecurityGroup"

  # EC2 NAT Instance

  RoleForEC2NATInstance:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2NATInstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:SetInstanceHealth
                  - autoscaling:CompleteLifecycleAction
                Resource:
                  - !Sub "arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AWS::StackName}-ASG"
                Condition:
                  StringEquals:
                    aws:ResourceTag/aws:cloudformation:stack-id:
                      Fn::Sub: "${AWS::StackId}"
              - Effect: Allow
                Action:
                  - ec2:CreateRoute
                  - ec2:DeleteRoute
                Resource:
                  - !Sub [
                      "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${RouteTableId}",
                      RouteTableId: !Ref PrivateRouteTable,
                    ]
                Condition:
                  StringEquals:
                    aws:ResourceTag/aws:cloudformation:stack-id:
                      Fn::Sub: "${AWS::StackId}"
              - Effect: Allow
                Action:
                  - ec2:ModifyInstanceAttribute
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/aws:cloudformation:stack-id:
                      Fn::Sub: "${AWS::StackId}"
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                Resource:
                  - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                  - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:elastic-ip/*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/aws:cloudformation:stack-id:
                      Fn::Sub: "${AWS::StackId}"

  EC2NATInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RoleForEC2NATInstance

  EC2NATInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-EC2NATInstanceLaunchTemplate"
      LaunchTemplateData:
        ImageId: !FindInMap
          - RegionToAlpineLinuxAMI
          - !Ref AWS::Region
          - ID
        InstanceType: !Ref EC2NATInstanceInstanceType
        CreditSpecification:
          CpuCredits: standard
        IamInstanceProfile:
          Arn: !GetAtt EC2NATInstanceProfile.Arn
        MetadataOptions:
          HttpEndpoint: enabled
          HttpProtocolIpv6: enabled
          HttpPutResponseHopLimit: 1
          HttpTokens: required
          InstanceMetadataTags: disabled
        KeyName:
          Fn::If:
            - IsKeyNameProvided
            - !Ref EC2NATInstanceKeyName
            - !Ref AWS::NoValue
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            SubnetId: !Ref PublicSubnetA
            Groups:
              - !Ref NATInstanceSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp3
              VolumeSize: 1
              Encrypted: true
              DeleteOnTermination: true
        UserData:
          Fn::Base64:
            Fn::Join:
              - "\n"
              - - |
                  #!/bin/ash
                  set -euo pipefail

                  catch() {
                      IMDS_TOKEN_HEADER="X-aws-ec2-metadata-token: $(curl -s -XPUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600')"
                      INSTANCE_ID=$(curl -s -H "${IMDS_TOKEN_HEADER}" http://169.254.169.254/latest/meta-data/instance-id)
                      ASG_NAME=$(cat /opt/ec2-context/asg/asg-name)
                      aws autoscaling complete-lifecycle-action --auto-scaling-group-name "${ASG_NAME}" --lifecycle-hook-name nat-launch --instance-id "${INSTANCE_ID}" --lifecycle-action-result ABANDON
                  }
                  trap catch ERR

                  finally() {
                      :
                  }
                  trap finally INT TERM EXIT

                  ip46tables() {
                      iptables "$@"
                      ip6tables "$@"
                  }

                  NIC=eth0
                  PRIVATE_SUBNET=10.0.128.0/17
                - !Sub [
                    "PRIVATE_SUBNET_V6=${Ipv6CidrBlock}",
                    Ipv6CidrBlock:
                      !Select [
                        1,
                        !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 2, 71],
                      ],
                  ]
                - |
                  mkdir -p /opt/ec2-context/cfn /opt/ec2-context/asg /opt/ec2-context/vpc
                  chmod 700 /opt/ec2-context
                - !Sub "echo '${AWS::StackName}' > /opt/ec2-context/cfn/stack-name"
                - !Sub "echo '${AWS::StackId}' > /opt/ec2-context/cfn/stack-id"
                - !Sub "echo '${AWS::StackName}-ASG' > /opt/ec2-context/asg/asg-name"
                - !Sub [
                    "echo '${PrivateRT}' > /opt/ec2-context/vpc/private-route-table",
                    PrivateRT: !Ref PrivateRouteTable,
                  ]
                - !Sub [
                    "echo '${EIP}' > /opt/ec2-context/eipalloc",
                    EIP: !GetAtt ElasticIP.AllocationId,
                  ]
                - |
                  apk add dhcpcd ip6tables curl aws-cli
                  /etc/init.d/networking restart

                  sysctl -w net.ipv4.ip_forward=1 | tee -a /etc/sysctl.conf
                  sysctl -w net.ipv6.conf.all.forwarding=1 | tee -a /etc/sysctl.conf
                  rc-update add sysctl

                  ip46tables -F
                  ip46tables -X
                  ip46tables -t nat -F
                  ip46tables -t nat -X
                  ip46tables -P INPUT ACCEPT
                  ip46tables -P OUTPUT ACCEPT
                  ip46tables -P FORWARD DROP
                  ip46tables -t nat -P PREROUTING ACCEPT
                  ip46tables -t nat -P POSTROUTING ACCEPT

                  iptables -t nat -A POSTROUTING -o "${NIC}" -s "${PRIVATE_SUBNET}" ! -d "${PRIVATE_SUBNET}" -j MASQUERADE
                  iptables -A FORWARD -i "${NIC}" -o "${NIC}" -m state --state NEW,ESTABLISHED,RELATED -s "${PRIVATE_SUBNET}" ! -d "${PRIVATE_SUBNET}" -j ACCEPT
                  iptables -A FORWARD -i "${NIC}" -o "${NIC}" -m state --state ESTABLISHED,RELATED ! -s "${PRIVATE_SUBNET}" -d "${PRIVATE_SUBNET}" -j ACCEPT
                  ip6tables -t nat -A POSTROUTING -o "${NIC}" -s "${PRIVATE_SUBNET_V6}" ! -d "${PRIVATE_SUBNET_V6}" -j MASQUERADE
                  ip6tables -A FORWARD -i "${NIC}" -o "${NIC}" -m state --state NEW,ESTABLISHED,RELATED -s "${PRIVATE_SUBNET_V6}" ! -d "${PRIVATE_SUBNET_V6}" -j ACCEPT
                  ip6tables -A FORWARD -i "${NIC}" -o "${NIC}" -m state --state ESTABLISHED,RELATED ! -s "${PRIVATE_SUBNET_V6}" -d "${PRIVATE_SUBNET_V6}" -j ACCEPT

                  rc-update add iptables
                  /etc/init.d/iptables save
                  rc-update add ip6tables
                  /etc/init.d/ip6tables save

                  cat <<'EOS' > /opt/ec2-asg-healthcheck.sh
                  #!/bin/ash
                  set -euo pipefail

                  catch() {
                      IMDS_TOKEN_HEADER="X-aws-ec2-metadata-token: $(curl -s -XPUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600')"
                      INSTANCE_ID=$(curl -s -H "${IMDS_TOKEN_HEADER}" http://169.254.169.254/latest/meta-data/instance-id)
                      aws autoscaling set-instance-health --instance-id "${INSTANCE_ID}" --health-status Unhealthy
                  }
                  trap catch ERR

                  finally() {
                      :
                  }
                  trap finally INT TERM EXIT

                  IMDS_TOKEN_HEADER="X-aws-ec2-metadata-token: $(curl -s -XPUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600')"
                  INSTANCE_ID=$(curl -s -H "${IMDS_TOKEN_HEADER}" http://169.254.169.254/latest/meta-data/instance-id)
                  REGION=$(curl -s -H "${IMDS_TOKEN_HEADER}" http://169.254.169.254/latest/meta-data/placement/region)
                  UPTIME=$(cat /proc/uptime | cut -d ' ' -f 1)

                  [[ $(echo "${UPTIME} < 300" | bc -l) -eq 1 ]] && exit 0

                  # Health check
                  ping -4 -c 2 "ec2.${REGION}.amazonaws.com" >/dev/null

                  exit 0
                  EOS
                  chmod 700 /opt/ec2-asg-healthcheck.sh

                  crontab - <<'EOS'
                  SHELL=/bin/ash
                  PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
                  */5 * * * * sleep $(($RANDOM \% 180)) && /opt/ec2-asg-healthcheck.sh
                  EOS
                  rc-update add crond

                  cat <<'EOS' > /opt/network_config_on_boot.sh
                  #!/bin/ash
                  set -euo pipefail

                  for CONF in /proc/sys/net/*/conf/*/accept_source_route; do echo 0 > $CONF; done
                  for CONF in /proc/sys/net/*/conf/*/accept_redirects; do echo 0 > $CONF; done
                  for CONF in /proc/sys/net/*/conf/*/log_martians; do echo 1 > $CONF; done
                  for CONF in /proc/sys/net/*/conf/*/rp_filter; do echo 1 > $CONF; done
                  for CONF in /proc/sys/net/*/icmp_echo_ignore_broadcasts; do echo 1 > $CONF; done
                  for CONF in /proc/sys/net/*/tcp_syncookies; do echo 1 > $CONF; done
                  for CONF in /proc/sys/net/*/icmp_ignore_bogus_error_responses; do echo 1 > $CONF; done
                  echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra

                  cat /proc/meminfo | grep MemFree | awk -F ' ' '{printf "%d",$2*1024/350*0.5}' > /proc/sys/net/netfilter/nf_conntrack_max
                  EOS
                  chmod 700 /opt/network_config_on_boot.sh
                  /opt/network_config_on_boot.sh
                  ln -s /opt/network_config_on_boot.sh /etc/local.d/network_config_on_boot.start

                  cat <<'EOS' > /etc/local.d/complete_lifecycle_action.start
                  #!/bin/ash
                  set -euo pipefail

                  catch() {
                      IMDS_TOKEN_HEADER="X-aws-ec2-metadata-token: $(curl -s -XPUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600')"
                      INSTANCE_ID=$(curl -s -H "${IMDS_TOKEN_HEADER}" http://169.254.169.254/latest/meta-data/instance-id)
                      aws autoscaling set-instance-health --instance-id "${INSTANCE_ID}" --health-status Unhealthy
                      ASG_NAME=$(cat /opt/ec2-context/asg/asg-name)
                      aws autoscaling complete-lifecycle-action --auto-scaling-group-name "${ASG_NAME}" --lifecycle-hook-name nat-launch --instance-id "${INSTANCE_ID}" --lifecycle-action-result ABANDON
                  }
                  trap catch ERR

                  finally() {
                      :
                  }
                  trap finally INT TERM EXIT

                  IMDS_TOKEN_HEADER="X-aws-ec2-metadata-token: $(curl -s -XPUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600')"
                  INSTANCE_ID=$(curl -s -H "${IMDS_TOKEN_HEADER}" http://169.254.169.254/latest/meta-data/instance-id)
                  REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
                  ASG_NAME=$(cat /opt/ec2-context/asg/asg-name)
                  PRIV_ROUTE_TABLE=$(cat /opt/ec2-context/vpc/private-route-table)

                  aws ec2 modify-instance-attribute --instance-id "${INSTANCE_ID}" --no-source-dest-check
                  aws ec2 delete-route --route-table-id "${PRIV_ROUTE_TABLE}" --destination-cidr-block 0.0.0.0/0 2>/dev/null || true
                  aws ec2 create-route --route-table-id "${PRIV_ROUTE_TABLE}" --destination-cidr-block 0.0.0.0/0 --instance-id "${INSTANCE_ID}" >/dev/null
                  aws ec2 delete-route --route-table-id "${PRIV_ROUTE_TABLE}" --destination-ipv6-cidr-block ::/0 2>/dev/null || true
                  aws ec2 create-route --route-table-id "${PRIV_ROUTE_TABLE}" --destination-ipv6-cidr-block ::/0 --instance-id "${INSTANCE_ID}" >/dev/null

                  aws autoscaling complete-lifecycle-action --auto-scaling-group-name "${ASG_NAME}" --lifecycle-hook-name nat-launch --instance-id "${INSTANCE_ID}" --lifecycle-action-result CONTINUE || true
                  EOS
                  chmod 700 /etc/local.d/complete_lifecycle_action.start

                  rc-update add local
                  apk update && apk upgrade

                  IMDS_TOKEN_HEADER="X-aws-ec2-metadata-token: $(curl -s -XPUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 21600')"
                  INSTANCE_ID=$(curl -s -H "${IMDS_TOKEN_HEADER}" http://169.254.169.254/latest/meta-data/instance-id)
                  aws ec2 associate-address --instance-id "${INSTANCE_ID}" --allocation-id "$(cat /opt/ec2-context/eipalloc)"
                  reboot
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-EC2NATInstance"
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-EC2NATInstance"
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-EC2NATInstance"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-ASG"
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2NATInstanceLaunchTemplate
        Version: !GetAtt EC2NATInstanceLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      MaxInstanceLifetime: 2419200
      AvailabilityZones:
        - Fn::Select:
            - 0
            - Fn::GetAZs: !Ref "AWS::Region"
      LifecycleHookSpecificationList:
        - LifecycleHookName: nat-launch
          LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          HeartbeatTimeout: 300
          DefaultResult: ABANDON

Outputs:
  Ipv6CidrBlock:
    Description: IPv6 CIDR block
    Value: !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 2, 57]]
